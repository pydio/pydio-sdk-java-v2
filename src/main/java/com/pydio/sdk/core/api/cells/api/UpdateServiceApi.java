/*
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.pydio.sdk.core.api.cells.api;

import com.google.gson.reflect.TypeToken;
import com.pydio.sdk.core.api.cells.ApiCallback;
import com.pydio.sdk.core.api.cells.ApiClient;
import com.pydio.sdk.core.api.cells.ApiException;
import com.pydio.sdk.core.api.cells.ApiResponse;
import com.pydio.sdk.core.api.cells.Configuration;
import com.pydio.sdk.core.api.cells.Pair;
import com.pydio.sdk.core.api.cells.ProgressRequestBody;
import com.pydio.sdk.core.api.cells.ProgressResponseBody;
import com.pydio.sdk.core.api.cells.model.UpdateApplyUpdateResponse;
import com.pydio.sdk.core.api.cells.model.UpdateUpdateResponse;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UpdateServiceApi {
    private ApiClient apiClient;

    public UpdateServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UpdateServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for applyUpdate
     * @param targetVersion  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call applyUpdateCall(String targetVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/update/{TargetVersion}"
                .replaceAll("\\{" + "TargetVersion" + "\\}", apiClient.escapeString(targetVersion));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call applyUpdateValidateBeforeCall(String targetVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'targetVersion' is set
        if (targetVersion == null) {
            throw new ApiException("Missing the required parameter 'targetVersion' when calling applyUpdate(Async)");
        }


        com.squareup.okhttp.Call call = applyUpdateCall(targetVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Apply an update to a given version
     *
     * @param targetVersion  (required)
     * @return UpdateApplyUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public UpdateApplyUpdateResponse applyUpdate(String targetVersion) throws ApiException {
        ApiResponse<UpdateApplyUpdateResponse> resp = applyUpdateWithHttpInfo(targetVersion);
        return resp.getData();
    }

    /**
     * Apply an update to a given version
     *
     * @param targetVersion  (required)
     * @return ApiResponse&lt;UpdateApplyUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<UpdateApplyUpdateResponse> applyUpdateWithHttpInfo(String targetVersion) throws ApiException {
        com.squareup.okhttp.Call call = applyUpdateValidateBeforeCall(targetVersion, null, null);
        Type localVarReturnType = new TypeToken<UpdateApplyUpdateResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Apply an update to a given version (asynchronously)
     *
     * @param targetVersion  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call applyUpdateAsync(String targetVersion, final ApiCallback<UpdateApplyUpdateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = applyUpdateValidateBeforeCall(targetVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateApplyUpdateResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRequired
     * @param channel Channel name. (optional)
     * @param packageName Name of the currently running application. (optional)
     * @param currentVersion Current version of the application. (optional)
     * @param GOOS Current GOOS. (optional)
     * @param GOARCH Current GOARCH. (optional)
     * @param serviceName Not Used : specific service to get updates for. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call updateRequiredCall(String channel, String packageName, String currentVersion, String GOOS, String GOARCH, String serviceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (channel != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("Channel", channel));
        if (packageName != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("PackageName", packageName));
        if (currentVersion != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("CurrentVersion", currentVersion));
        if (GOOS != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("GOOS", GOOS));
        if (GOARCH != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("GOARCH", GOARCH));
        if (serviceName != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("ServiceName", serviceName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRequiredValidateBeforeCall(String channel, String packageName, String currentVersion, String GOOS, String GOARCH, String serviceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = updateRequiredCall(channel, packageName, currentVersion, GOOS, GOARCH, serviceName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check the remote server to see if there are available binaries
     *
     * @param channel Channel name. (optional)
     * @param packageName Name of the currently running application. (optional)
     * @param currentVersion Current version of the application. (optional)
     * @param GOOS Current GOOS. (optional)
     * @param GOARCH Current GOARCH. (optional)
     * @param serviceName Not Used : specific service to get updates for. (optional)
     * @return UpdateUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public UpdateUpdateResponse updateRequired(String channel, String packageName, String currentVersion, String GOOS, String GOARCH, String serviceName) throws ApiException {
        ApiResponse<UpdateUpdateResponse> resp = updateRequiredWithHttpInfo(channel, packageName, currentVersion, GOOS, GOARCH, serviceName);
        return resp.getData();
    }

    /**
     * Check the remote server to see if there are available binaries
     *
     * @param channel Channel name. (optional)
     * @param packageName Name of the currently running application. (optional)
     * @param currentVersion Current version of the application. (optional)
     * @param GOOS Current GOOS. (optional)
     * @param GOARCH Current GOARCH. (optional)
     * @param serviceName Not Used : specific service to get updates for. (optional)
     * @return ApiResponse&lt;UpdateUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<UpdateUpdateResponse> updateRequiredWithHttpInfo(String channel, String packageName, String currentVersion, String GOOS, String GOARCH, String serviceName) throws ApiException {
        com.squareup.okhttp.Call call = updateRequiredValidateBeforeCall(channel, packageName, currentVersion, GOOS, GOARCH, serviceName, null, null);
        Type localVarReturnType = new TypeToken<UpdateUpdateResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check the remote server to see if there are available binaries (asynchronously)
     *
     * @param channel Channel name. (optional)
     * @param packageName Name of the currently running application. (optional)
     * @param currentVersion Current version of the application. (optional)
     * @param GOOS Current GOOS. (optional)
     * @param GOARCH Current GOARCH. (optional)
     * @param serviceName Not Used : specific service to get updates for. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRequiredAsync(String channel, String packageName, String currentVersion, String GOOS, String GOARCH, String serviceName, final ApiCallback<UpdateUpdateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRequiredValidateBeforeCall(channel, packageName, currentVersion, GOOS, GOARCH, serviceName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateUpdateResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
