/*
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.pydio.sdk.core.api.cells.api;

import com.google.gson.reflect.TypeToken;
import com.pydio.sdk.core.api.cells.ApiCallback;
import com.pydio.sdk.core.api.cells.ApiClient;
import com.pydio.sdk.core.api.cells.ApiException;
import com.pydio.sdk.core.api.cells.ApiResponse;
import com.pydio.sdk.core.api.cells.Configuration;
import com.pydio.sdk.core.api.cells.Pair;
import com.pydio.sdk.core.api.cells.ProgressRequestBody;
import com.pydio.sdk.core.api.cells.ProgressResponseBody;
import com.pydio.sdk.core.api.cells.model.IdmRole;
import com.pydio.sdk.core.api.cells.model.RestRolesCollection;
import com.pydio.sdk.core.api.cells.model.RestSearchRoleRequest;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RoleServiceApi {
    private ApiClient apiClient;

    public RoleServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoleServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteRole
     * @param uuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call deleteRoleCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/role/{Uuid}"
                .replaceAll("\\{" + "Uuid" + "\\}", apiClient.escapeString(uuid));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRoleValidateBeforeCall(String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteRole(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteRoleCall(uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a Role by ID
     * 
     * @param uuid  (required)
     * @return IdmRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public IdmRole deleteRole(String uuid) throws ApiException {
        ApiResponse<IdmRole> resp = deleteRoleWithHttpInfo(uuid);
        return resp.getData();
    }

    /**
     * Delete a Role by ID
     * 
     * @param uuid  (required)
     * @return ApiResponse&lt;IdmRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<IdmRole> deleteRoleWithHttpInfo(String uuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteRoleValidateBeforeCall(uuid, null, null);
        Type localVarReturnType = new TypeToken<IdmRole>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a Role by ID (asynchronously)
     * 
     * @param uuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRoleAsync(String uuid, final ApiCallback<IdmRole> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRoleValidateBeforeCall(uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdmRole>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRole
     * @param uuid  (required)
     * @param label  (optional)
     * @param isTeam  (optional)
     * @param groupRole  (optional)
     * @param userRole  (optional)
     * @param lastUpdated  (optional)
     * @param autoApplies  (optional)
     * @param policiesContextEditable  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call getRoleCall(String uuid, String label, Boolean isTeam, Boolean groupRole, Boolean userRole, Integer lastUpdated, List<String> autoApplies, Boolean policiesContextEditable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/role/{Uuid}"
                .replaceAll("\\{" + "Uuid" + "\\}", apiClient.escapeString(uuid));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (label != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Label", label));
        if (isTeam != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("IsTeam", isTeam));
        if (groupRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("GroupRole", groupRole));
        if (userRole != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("UserRole", userRole));
        if (lastUpdated != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("LastUpdated", lastUpdated));
        if (autoApplies != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "AutoApplies", autoApplies));
        if (policiesContextEditable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PoliciesContextEditable", policiesContextEditable));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRoleValidateBeforeCall(String uuid, String label, Boolean isTeam, Boolean groupRole, Boolean userRole, Integer lastUpdated, List<String> autoApplies, Boolean policiesContextEditable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getRole(Async)");
        }
        

        com.squareup.okhttp.Call call = getRoleCall(uuid, label, isTeam, groupRole, userRole, lastUpdated, autoApplies, policiesContextEditable, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a Role by ID
     * 
     * @param uuid  (required)
     * @param label  (optional)
     * @param isTeam  (optional)
     * @param groupRole  (optional)
     * @param userRole  (optional)
     * @param lastUpdated  (optional)
     * @param autoApplies  (optional)
     * @param policiesContextEditable  (optional)
     * @return IdmRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public IdmRole getRole(String uuid, String label, Boolean isTeam, Boolean groupRole, Boolean userRole, Integer lastUpdated, List<String> autoApplies, Boolean policiesContextEditable) throws ApiException {
        ApiResponse<IdmRole> resp = getRoleWithHttpInfo(uuid, label, isTeam, groupRole, userRole, lastUpdated, autoApplies, policiesContextEditable);
        return resp.getData();
    }

    /**
     * Get a Role by ID
     * 
     * @param uuid  (required)
     * @param label  (optional)
     * @param isTeam  (optional)
     * @param groupRole  (optional)
     * @param userRole  (optional)
     * @param lastUpdated  (optional)
     * @param autoApplies  (optional)
     * @param policiesContextEditable  (optional)
     * @return ApiResponse&lt;IdmRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<IdmRole> getRoleWithHttpInfo(String uuid, String label, Boolean isTeam, Boolean groupRole, Boolean userRole, Integer lastUpdated, List<String> autoApplies, Boolean policiesContextEditable) throws ApiException {
        com.squareup.okhttp.Call call = getRoleValidateBeforeCall(uuid, label, isTeam, groupRole, userRole, lastUpdated, autoApplies, policiesContextEditable, null, null);
        Type localVarReturnType = new TypeToken<IdmRole>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Role by ID (asynchronously)
     * 
     * @param uuid  (required)
     * @param label  (optional)
     * @param isTeam  (optional)
     * @param groupRole  (optional)
     * @param userRole  (optional)
     * @param lastUpdated  (optional)
     * @param autoApplies  (optional)
     * @param policiesContextEditable  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRoleAsync(String uuid, String label, Boolean isTeam, Boolean groupRole, Boolean userRole, Integer lastUpdated, List<String> autoApplies, Boolean policiesContextEditable, final ApiCallback<IdmRole> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRoleValidateBeforeCall(uuid, label, isTeam, groupRole, userRole, lastUpdated, autoApplies, policiesContextEditable, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdmRole>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchRoles
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call searchRolesCall(RestSearchRoleRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/role";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchRolesValidateBeforeCall(RestSearchRoleRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchRoles(Async)");
        }
        

        com.squareup.okhttp.Call call = searchRolesCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search Roles
     * 
     * @param body  (required)
     * @return RestRolesCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public RestRolesCollection searchRoles(RestSearchRoleRequest body) throws ApiException {
        ApiResponse<RestRolesCollection> resp = searchRolesWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Search Roles
     * 
     * @param body  (required)
     * @return ApiResponse&lt;RestRolesCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<RestRolesCollection> searchRolesWithHttpInfo(RestSearchRoleRequest body) throws ApiException {
        com.squareup.okhttp.Call call = searchRolesValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<RestRolesCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Roles (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchRolesAsync(RestSearchRoleRequest body, final ApiCallback<RestRolesCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchRolesValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestRolesCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setRole
     * @param uuid  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call setRoleCall(String uuid, IdmRole body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/role/{Uuid}"
                .replaceAll("\\{" + "Uuid" + "\\}", apiClient.escapeString(uuid));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setRoleValidateBeforeCall(String uuid, IdmRole body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling setRole(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setRole(Async)");
        }
        

        com.squareup.okhttp.Call call = setRoleCall(uuid, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create or update a Role
     * 
     * @param uuid  (required)
     * @param body  (required)
     * @return IdmRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public IdmRole setRole(String uuid, IdmRole body) throws ApiException {
        ApiResponse<IdmRole> resp = setRoleWithHttpInfo(uuid, body);
        return resp.getData();
    }

    /**
     * Create or update a Role
     * 
     * @param uuid  (required)
     * @param body  (required)
     * @return ApiResponse&lt;IdmRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<IdmRole> setRoleWithHttpInfo(String uuid, IdmRole body) throws ApiException {
        com.squareup.okhttp.Call call = setRoleValidateBeforeCall(uuid, body, null, null);
        Type localVarReturnType = new TypeToken<IdmRole>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create or update a Role (asynchronously)
     * 
     * @param uuid  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setRoleAsync(String uuid, IdmRole body, final ApiCallback<IdmRole> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setRoleValidateBeforeCall(uuid, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdmRole>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
