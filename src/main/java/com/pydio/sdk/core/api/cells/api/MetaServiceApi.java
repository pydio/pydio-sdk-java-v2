/*
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.pydio.sdk.core.api.cells.api;

import com.google.gson.reflect.TypeToken;
import com.pydio.sdk.core.api.cells.ApiCallback;
import com.pydio.sdk.core.api.cells.ApiClient;
import com.pydio.sdk.core.api.cells.ApiException;
import com.pydio.sdk.core.api.cells.ApiResponse;
import com.pydio.sdk.core.api.cells.Configuration;
import com.pydio.sdk.core.api.cells.Pair;
import com.pydio.sdk.core.api.cells.ProgressRequestBody;
import com.pydio.sdk.core.api.cells.ProgressResponseBody;
import com.pydio.sdk.core.api.cells.model.RestBulkMetaResponse;
import com.pydio.sdk.core.api.cells.model.RestGetBulkMetaRequest;
import com.pydio.sdk.core.api.cells.model.RestMetaCollection;
import com.pydio.sdk.core.api.cells.model.RestMetaNamespaceRequest;
import com.pydio.sdk.core.api.cells.model.TreeNode;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetaServiceApi {
    private ApiClient apiClient;

    public MetaServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetaServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteMeta
     * @param nodePath  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call deleteMetaCall(String nodePath, RestMetaNamespaceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/meta/delete/{NodePath}"
                .replaceAll("\\{" + "NodePath" + "\\}", apiClient.escapeString(nodePath));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMetaValidateBeforeCall(String nodePath, RestMetaNamespaceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodePath' is set
        if (nodePath == null) {
            throw new ApiException("Missing the required parameter 'nodePath' when calling deleteMeta(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteMeta(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMetaCall(nodePath, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete metadata of a given node
     * 
     * @param nodePath  (required)
     * @param body  (required)
     * @return TreeNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public TreeNode deleteMeta(String nodePath, RestMetaNamespaceRequest body) throws ApiException {
        ApiResponse<TreeNode> resp = deleteMetaWithHttpInfo(nodePath, body);
        return resp.getData();
    }

    /**
     * Delete metadata of a given node
     * 
     * @param nodePath  (required)
     * @param body  (required)
     * @return ApiResponse&lt;TreeNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<TreeNode> deleteMetaWithHttpInfo(String nodePath, RestMetaNamespaceRequest body) throws ApiException {
        com.squareup.okhttp.Call call = deleteMetaValidateBeforeCall(nodePath, body, null, null);
        Type localVarReturnType = new TypeToken<TreeNode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete metadata of a given node (asynchronously)
     * 
     * @param nodePath  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMetaAsync(String nodePath, RestMetaNamespaceRequest body, final ApiCallback<TreeNode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMetaValidateBeforeCall(nodePath, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TreeNode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBulkMeta
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call getBulkMetaCall(RestGetBulkMetaRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/meta/bulk/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBulkMetaValidateBeforeCall(RestGetBulkMetaRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getBulkMeta(Async)");
        }
        

        com.squareup.okhttp.Call call = getBulkMetaCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List meta for a list of nodes, or a full directory using /path/_* syntax
     * 
     * @param body  (required)
     * @return RestBulkMetaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public RestBulkMetaResponse getBulkMeta(RestGetBulkMetaRequest body) throws ApiException {
        ApiResponse<RestBulkMetaResponse> resp = getBulkMetaWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * List meta for a list of nodes, or a full directory using /path/_* syntax
     * 
     * @param body  (required)
     * @return ApiResponse&lt;RestBulkMetaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<RestBulkMetaResponse> getBulkMetaWithHttpInfo(RestGetBulkMetaRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getBulkMetaValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<RestBulkMetaResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List meta for a list of nodes, or a full directory using /path/_* syntax (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBulkMetaAsync(RestGetBulkMetaRequest body, final ApiCallback<RestBulkMetaResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBulkMetaValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestBulkMetaResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMeta
     * @param nodePath  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call getMetaCall(String nodePath, RestMetaNamespaceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/meta/get/{NodePath}"
                .replaceAll("\\{" + "NodePath" + "\\}", apiClient.escapeString(nodePath));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMetaValidateBeforeCall(String nodePath, RestMetaNamespaceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodePath' is set
        if (nodePath == null) {
            throw new ApiException("Missing the required parameter 'nodePath' when calling getMeta(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getMeta(Async)");
        }
        

        com.squareup.okhttp.Call call = getMetaCall(nodePath, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Load metadata for a given node
     * 
     * @param nodePath  (required)
     * @param body  (required)
     * @return TreeNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public TreeNode getMeta(String nodePath, RestMetaNamespaceRequest body) throws ApiException {
        ApiResponse<TreeNode> resp = getMetaWithHttpInfo(nodePath, body);
        return resp.getData();
    }

    /**
     * Load metadata for a given node
     * 
     * @param nodePath  (required)
     * @param body  (required)
     * @return ApiResponse&lt;TreeNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<TreeNode> getMetaWithHttpInfo(String nodePath, RestMetaNamespaceRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getMetaValidateBeforeCall(nodePath, body, null, null);
        Type localVarReturnType = new TypeToken<TreeNode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Load metadata for a given node (asynchronously)
     * 
     * @param nodePath  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMetaAsync(String nodePath, RestMetaNamespaceRequest body, final ApiCallback<TreeNode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMetaValidateBeforeCall(nodePath, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TreeNode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setMeta
     * @param nodePath  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call setMetaCall(String nodePath, RestMetaCollection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/meta/set/{NodePath}"
                .replaceAll("\\{" + "NodePath" + "\\}", apiClient.escapeString(nodePath));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setMetaValidateBeforeCall(String nodePath, RestMetaCollection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodePath' is set
        if (nodePath == null) {
            throw new ApiException("Missing the required parameter 'nodePath' when calling setMeta(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setMeta(Async)");
        }
        

        com.squareup.okhttp.Call call = setMetaCall(nodePath, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update metadata for a given node
     * 
     * @param nodePath  (required)
     * @param body  (required)
     * @return TreeNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public TreeNode setMeta(String nodePath, RestMetaCollection body) throws ApiException {
        ApiResponse<TreeNode> resp = setMetaWithHttpInfo(nodePath, body);
        return resp.getData();
    }

    /**
     * Update metadata for a given node
     * 
     * @param nodePath  (required)
     * @param body  (required)
     * @return ApiResponse&lt;TreeNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<TreeNode> setMetaWithHttpInfo(String nodePath, RestMetaCollection body) throws ApiException {
        com.squareup.okhttp.Call call = setMetaValidateBeforeCall(nodePath, body, null, null);
        Type localVarReturnType = new TypeToken<TreeNode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update metadata for a given node (asynchronously)
     * 
     * @param nodePath  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setMetaAsync(String nodePath, RestMetaCollection body, final ApiCallback<TreeNode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setMetaValidateBeforeCall(nodePath, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TreeNode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
