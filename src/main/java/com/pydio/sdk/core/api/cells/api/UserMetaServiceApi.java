/*
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.pydio.sdk.core.api.cells.api;

import com.google.gson.reflect.TypeToken;
import com.pydio.sdk.core.api.cells.ApiCallback;
import com.pydio.sdk.core.api.cells.ApiClient;
import com.pydio.sdk.core.api.cells.ApiException;
import com.pydio.sdk.core.api.cells.ApiResponse;
import com.pydio.sdk.core.api.cells.Configuration;
import com.pydio.sdk.core.api.cells.Pair;
import com.pydio.sdk.core.api.cells.ProgressRequestBody;
import com.pydio.sdk.core.api.cells.ProgressResponseBody;
import com.pydio.sdk.core.api.cells.model.IdmSearchUserMetaRequest;
import com.pydio.sdk.core.api.cells.model.IdmUpdateUserMetaNamespaceRequest;
import com.pydio.sdk.core.api.cells.model.IdmUpdateUserMetaNamespaceResponse;
import com.pydio.sdk.core.api.cells.model.IdmUpdateUserMetaRequest;
import com.pydio.sdk.core.api.cells.model.IdmUpdateUserMetaResponse;
import com.pydio.sdk.core.api.cells.model.RestBulkMetaResponse;
import com.pydio.sdk.core.api.cells.model.RestDeleteUserMetaTagsResponse;
import com.pydio.sdk.core.api.cells.model.RestListUserMetaTagsResponse;
import com.pydio.sdk.core.api.cells.model.RestPutUserMetaTagRequest;
import com.pydio.sdk.core.api.cells.model.RestPutUserMetaTagResponse;
import com.pydio.sdk.core.api.cells.model.RestUserBookmarksRequest;
import com.pydio.sdk.core.api.cells.model.RestUserMetaCollection;
import com.pydio.sdk.core.api.cells.model.RestUserMetaNamespaceCollection;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserMetaServiceApi {
    private ApiClient apiClient;

    public UserMetaServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserMetaServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteUserMetaTags
     * @param namespace  (required)
     * @param tags  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call deleteUserMetaTagsCall(String namespace, String tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-meta/tags/{Namespace}/{Tags}"
                .replaceAll("\\{" + "Namespace" + "\\}", apiClient.escapeString(namespace))
                .replaceAll("\\{" + "Tags" + "\\}", apiClient.escapeString(tags));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserMetaTagsValidateBeforeCall(String namespace, String tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling deleteUserMetaTags(Async)");
        }
        
        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling deleteUserMetaTags(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteUserMetaTagsCall(namespace, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Tags for a given namespace
     * 
     * @param namespace  (required)
     * @param tags  (required)
     * @return RestDeleteUserMetaTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public RestDeleteUserMetaTagsResponse deleteUserMetaTags(String namespace, String tags) throws ApiException {
        ApiResponse<RestDeleteUserMetaTagsResponse> resp = deleteUserMetaTagsWithHttpInfo(namespace, tags);
        return resp.getData();
    }

    /**
     * List Tags for a given namespace
     * 
     * @param namespace  (required)
     * @param tags  (required)
     * @return ApiResponse&lt;RestDeleteUserMetaTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<RestDeleteUserMetaTagsResponse> deleteUserMetaTagsWithHttpInfo(String namespace, String tags) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserMetaTagsValidateBeforeCall(namespace, tags, null, null);
        Type localVarReturnType = new TypeToken<RestDeleteUserMetaTagsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Tags for a given namespace (asynchronously)
     * 
     * @param namespace  (required)
     * @param tags  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserMetaTagsAsync(String namespace, String tags, final ApiCallback<RestDeleteUserMetaTagsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserMetaTagsValidateBeforeCall(namespace, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestDeleteUserMetaTagsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listUserMetaNamespace
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call listUserMetaNamespaceCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-meta/namespace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listUserMetaNamespaceValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listUserMetaNamespaceCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List defined meta namespaces
     * 
     * @return RestUserMetaNamespaceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public RestUserMetaNamespaceCollection listUserMetaNamespace() throws ApiException {
        ApiResponse<RestUserMetaNamespaceCollection> resp = listUserMetaNamespaceWithHttpInfo();
        return resp.getData();
    }

    /**
     * List defined meta namespaces
     * 
     * @return ApiResponse&lt;RestUserMetaNamespaceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<RestUserMetaNamespaceCollection> listUserMetaNamespaceWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listUserMetaNamespaceValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<RestUserMetaNamespaceCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List defined meta namespaces (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listUserMetaNamespaceAsync(final ApiCallback<RestUserMetaNamespaceCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listUserMetaNamespaceValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestUserMetaNamespaceCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listUserMetaTags
     * @param namespace  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call listUserMetaTagsCall(String namespace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-meta/tags/{Namespace}"
                .replaceAll("\\{" + "Namespace" + "\\}", apiClient.escapeString(namespace));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listUserMetaTagsValidateBeforeCall(String namespace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling listUserMetaTags(Async)");
        }
        

        com.squareup.okhttp.Call call = listUserMetaTagsCall(namespace, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Tags for a given namespace
     * 
     * @param namespace  (required)
     * @return RestListUserMetaTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public RestListUserMetaTagsResponse listUserMetaTags(String namespace) throws ApiException {
        ApiResponse<RestListUserMetaTagsResponse> resp = listUserMetaTagsWithHttpInfo(namespace);
        return resp.getData();
    }

    /**
     * List Tags for a given namespace
     * 
     * @param namespace  (required)
     * @return ApiResponse&lt;RestListUserMetaTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<RestListUserMetaTagsResponse> listUserMetaTagsWithHttpInfo(String namespace) throws ApiException {
        com.squareup.okhttp.Call call = listUserMetaTagsValidateBeforeCall(namespace, null, null);
        Type localVarReturnType = new TypeToken<RestListUserMetaTagsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Tags for a given namespace (asynchronously)
     * 
     * @param namespace  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listUserMetaTagsAsync(String namespace, final ApiCallback<RestListUserMetaTagsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listUserMetaTagsValidateBeforeCall(namespace, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestListUserMetaTagsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putUserMetaTag
     * @param namespace  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call putUserMetaTagCall(String namespace, RestPutUserMetaTagRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user-meta/tags/{Namespace}"
                .replaceAll("\\{" + "Namespace" + "\\}", apiClient.escapeString(namespace));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putUserMetaTagValidateBeforeCall(String namespace, RestPutUserMetaTagRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling putUserMetaTag(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putUserMetaTag(Async)");
        }
        

        com.squareup.okhttp.Call call = putUserMetaTagCall(namespace, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Tags for a given namespace
     * 
     * @param namespace  (required)
     * @param body  (required)
     * @return RestPutUserMetaTagResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public RestPutUserMetaTagResponse putUserMetaTag(String namespace, RestPutUserMetaTagRequest body) throws ApiException {
        ApiResponse<RestPutUserMetaTagResponse> resp = putUserMetaTagWithHttpInfo(namespace, body);
        return resp.getData();
    }

    /**
     * List Tags for a given namespace
     * 
     * @param namespace  (required)
     * @param body  (required)
     * @return ApiResponse&lt;RestPutUserMetaTagResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<RestPutUserMetaTagResponse> putUserMetaTagWithHttpInfo(String namespace, RestPutUserMetaTagRequest body) throws ApiException {
        com.squareup.okhttp.Call call = putUserMetaTagValidateBeforeCall(namespace, body, null, null);
        Type localVarReturnType = new TypeToken<RestPutUserMetaTagResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Tags for a given namespace (asynchronously)
     * 
     * @param namespace  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putUserMetaTagAsync(String namespace, RestPutUserMetaTagRequest body, final ApiCallback<RestPutUserMetaTagResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putUserMetaTagValidateBeforeCall(namespace, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestPutUserMetaTagResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchUserMeta
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call searchUserMetaCall(IdmSearchUserMetaRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user-meta/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchUserMetaValidateBeforeCall(IdmSearchUserMetaRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchUserMeta(Async)");
        }
        

        com.squareup.okhttp.Call call = searchUserMetaCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search a list of meta by node Id or by User id and by namespace
     * 
     * @param body  (required)
     * @return RestUserMetaCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public RestUserMetaCollection searchUserMeta(IdmSearchUserMetaRequest body) throws ApiException {
        ApiResponse<RestUserMetaCollection> resp = searchUserMetaWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Search a list of meta by node Id or by User id and by namespace
     * 
     * @param body  (required)
     * @return ApiResponse&lt;RestUserMetaCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<RestUserMetaCollection> searchUserMetaWithHttpInfo(IdmSearchUserMetaRequest body) throws ApiException {
        com.squareup.okhttp.Call call = searchUserMetaValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<RestUserMetaCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search a list of meta by node Id or by User id and by namespace (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchUserMetaAsync(IdmSearchUserMetaRequest body, final ApiCallback<RestUserMetaCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchUserMetaValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestUserMetaCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUserMeta
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call updateUserMetaCall(IdmUpdateUserMetaRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user-meta/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserMetaValidateBeforeCall(IdmUpdateUserMetaRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateUserMeta(Async)");
        }
        

        com.squareup.okhttp.Call call = updateUserMetaCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update/delete user meta
     * 
     * @param body  (required)
     * @return IdmUpdateUserMetaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public IdmUpdateUserMetaResponse updateUserMeta(IdmUpdateUserMetaRequest body) throws ApiException {
        ApiResponse<IdmUpdateUserMetaResponse> resp = updateUserMetaWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Update/delete user meta
     * 
     * @param body  (required)
     * @return ApiResponse&lt;IdmUpdateUserMetaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<IdmUpdateUserMetaResponse> updateUserMetaWithHttpInfo(IdmUpdateUserMetaRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateUserMetaValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<IdmUpdateUserMetaResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update/delete user meta (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserMetaAsync(IdmUpdateUserMetaRequest body, final ApiCallback<IdmUpdateUserMetaResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserMetaValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdmUpdateUserMetaResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUserMetaNamespace
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call updateUserMetaNamespaceCall(IdmUpdateUserMetaNamespaceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user-meta/namespace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserMetaNamespaceValidateBeforeCall(IdmUpdateUserMetaNamespaceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateUserMetaNamespace(Async)");
        }
        

        com.squareup.okhttp.Call call = updateUserMetaNamespaceCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Admin: update namespaces
     * 
     * @param body  (required)
     * @return IdmUpdateUserMetaNamespaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public IdmUpdateUserMetaNamespaceResponse updateUserMetaNamespace(IdmUpdateUserMetaNamespaceRequest body) throws ApiException {
        ApiResponse<IdmUpdateUserMetaNamespaceResponse> resp = updateUserMetaNamespaceWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Admin: update namespaces
     * 
     * @param body  (required)
     * @return ApiResponse&lt;IdmUpdateUserMetaNamespaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<IdmUpdateUserMetaNamespaceResponse> updateUserMetaNamespaceWithHttpInfo(IdmUpdateUserMetaNamespaceRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateUserMetaNamespaceValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<IdmUpdateUserMetaNamespaceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Admin: update namespaces (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserMetaNamespaceAsync(IdmUpdateUserMetaNamespaceRequest body, final ApiCallback<IdmUpdateUserMetaNamespaceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserMetaNamespaceValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdmUpdateUserMetaNamespaceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userBookmarks
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to encode the request body object
     */
    public com.squareup.okhttp.Call userBookmarksCall(RestUserBookmarksRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user-meta/bookmarks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userBookmarksValidateBeforeCall(RestUserBookmarksRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling userBookmarks(Async)");
        }
        

        com.squareup.okhttp.Call call = userBookmarksCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list
     * 
     * @param body  (required)
     * @return RestBulkMetaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public RestBulkMetaResponse userBookmarks(RestUserBookmarksRequest body) throws ApiException {
        ApiResponse<RestBulkMetaResponse> resp = userBookmarksWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list
     * 
     * @param body  (required)
     * @return ApiResponse&lt;RestBulkMetaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot decode the response body
     */
    public ApiResponse<RestBulkMetaResponse> userBookmarksWithHttpInfo(RestUserBookmarksRequest body) throws ApiException {
        com.squareup.okhttp.Call call = userBookmarksValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<RestBulkMetaResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userBookmarksAsync(RestUserBookmarksRequest body, final ApiCallback<RestBulkMetaResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userBookmarksValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestBulkMetaResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
